import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, aa as Icon, E as validate_each_argument, v as validate_slots, I as goto, e as element, a as claim_element, b as children, f as detach_dev, g as attr_dev, h as add_location, j as insert_dev, F as destroy_each, l as create_component, p as space, A as text, m as claim_component, q as claim_space, B as claim_text, G as toggle_class, r as set_style, w as append_dev, n as mount_component, ab as select_option, y as listen_dev, C as set_data_dev, t as transition_in, k as transition_out, o as destroy_component, a2 as prop_dev, x as add_render_callback, V as getContext, J as binding_callbacks, K as bind, L as add_flush_callback, D as query_selector_all, N as check_outros, U as globals, ac as HtmlTag, O as group_outros } from './client.281f0700.js';
import { s as svelteUrl, r as rollupUrl, m as mapbox_setup, R as Repl, S as ScreenToggle } from './config.d9ed0b54.js';

/* src/routes/tutorial/[slug]/_TableOfContents.svelte generated by Svelte v3.31.0 */
const file = "src/routes/tutorial/[slug]/_TableOfContents.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	child_ctx[6] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[6] = i;
	return child_ctx;
}

// (83:5) {#each section.chapters as chapter, i}
function create_each_block_1(ctx) {
	let option;
	let t0_value = String.fromCharCode(/*i*/ ctx[6] + 97) + "";
	let t0;
	let t1;
	let t2_value = /*chapter*/ ctx[7].title + "";
	let t2;
	let option_value_value;

	const block = {
		c: function create() {
			option = element("option");
			t0 = text(t0_value);
			t1 = text(". ");
			t2 = text(t2_value);
			this.h();
		},
		l: function claim(nodes) {
			option = claim_element(nodes, "OPTION", { value: true });
			var option_nodes = children(option);
			t0 = claim_text(option_nodes, t0_value);
			t1 = claim_text(option_nodes, ". ");
			t2 = claim_text(option_nodes, t2_value);
			option_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			option.__value = option_value_value = /*chapter*/ ctx[7].slug;
			option.value = option.__value;
			add_location(option, file, 83, 6, 1542);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option, anchor);
			append_dev(option, t0);
			append_dev(option, t1);
			append_dev(option, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*sections*/ 1 && t2_value !== (t2_value = /*chapter*/ ctx[7].title + "")) set_data_dev(t2, t2_value);

			if (dirty & /*sections*/ 1 && option_value_value !== (option_value_value = /*chapter*/ ctx[7].slug)) {
				prop_dev(option, "__value", option_value_value);
				option.value = option.__value;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(83:5) {#each section.chapters as chapter, i}",
		ctx
	});

	return block;
}

// (81:3) {#each sections as section, i}
function create_each_block(ctx) {
	let optgroup;
	let optgroup_label_value;
	let each_value_1 = /*section*/ ctx[4].chapters;
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			optgroup = element("optgroup");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			optgroup = claim_element(nodes, "OPTGROUP", { label: true });
			var optgroup_nodes = children(optgroup);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(optgroup_nodes);
			}

			optgroup_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(optgroup, "label", optgroup_label_value = "" + (/*i*/ ctx[6] + 1 + ". " + /*section*/ ctx[4].title));
			add_location(optgroup, file, 81, 4, 1448);
		},
		m: function mount(target, anchor) {
			insert_dev(target, optgroup, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(optgroup, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*sections, String*/ 1) {
				each_value_1 = /*section*/ ctx[4].chapters;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(optgroup, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}

			if (dirty & /*sections*/ 1 && optgroup_label_value !== (optgroup_label_value = "" + (/*i*/ ctx[6] + 1 + ". " + /*section*/ ctx[4].title))) {
				attr_dev(optgroup, "label", optgroup_label_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(optgroup);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(81:3) {#each sections as section, i}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let nav;
	let a0;
	let icon0;
	let a0_href_value;
	let t0;
	let div;
	let span1;
	let strong;
	let span0;
	let icon1;
	let t1;
	let t2_value = /*selected*/ ctx[2].section.title + "";
	let t2;
	let t3;
	let t4;
	let t5_value = /*selected*/ ctx[2].chapter.title + "";
	let t5;
	let t6;
	let select;
	let t7;
	let a1;
	let icon2;
	let a1_href_value;
	let current;
	let mounted;
	let dispose;

	icon0 = new Icon({
			props: { name: "arrow-left" },
			$$inline: true
		});

	icon1 = new Icon({ props: { name: "menu" }, $$inline: true });
	let each_value = /*sections*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	icon2 = new Icon({
			props: { name: "arrow-right" },
			$$inline: true
		});

	const block = {
		c: function create() {
			nav = element("nav");
			a0 = element("a");
			create_component(icon0.$$.fragment);
			t0 = space();
			div = element("div");
			span1 = element("span");
			strong = element("strong");
			span0 = element("span");
			create_component(icon1.$$.fragment);
			t1 = space();
			t2 = text(t2_value);
			t3 = text(" /");
			t4 = space();
			t5 = text(t5_value);
			t6 = space();
			select = element("select");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t7 = space();
			a1 = element("a");
			create_component(icon2.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			nav = claim_element(nodes, "NAV", { class: true });
			var nav_nodes = children(nav);

			a0 = claim_element(nav_nodes, "A", {
				rel: true,
				"aria-label": true,
				class: true,
				href: true
			});

			var a0_nodes = children(a0);
			claim_component(icon0.$$.fragment, a0_nodes);
			a0_nodes.forEach(detach_dev);
			t0 = claim_space(nav_nodes);
			div = claim_element(nav_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			span1 = claim_element(div_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			strong = claim_element(span1_nodes, "STRONG", { class: true });
			var strong_nodes = children(strong);
			span0 = claim_element(strong_nodes, "SPAN", { style: true, class: true });
			var span0_nodes = children(span0);
			claim_component(icon1.$$.fragment, span0_nodes);
			span0_nodes.forEach(detach_dev);
			t1 = claim_space(strong_nodes);
			t2 = claim_text(strong_nodes, t2_value);
			t3 = claim_text(strong_nodes, " /");
			strong_nodes.forEach(detach_dev);
			t4 = claim_space(span1_nodes);
			t5 = claim_text(span1_nodes, t5_value);
			span1_nodes.forEach(detach_dev);
			t6 = claim_space(div_nodes);
			select = claim_element(div_nodes, "SELECT", { value: true, class: true });
			var select_nodes = children(select);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(select_nodes);
			}

			select_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			t7 = claim_space(nav_nodes);

			a1 = claim_element(nav_nodes, "A", {
				rel: true,
				"aria-label": true,
				class: true,
				href: true
			});

			var a1_nodes = children(a1);
			claim_component(icon2.$$.fragment, a1_nodes);
			a1_nodes.forEach(detach_dev);
			nav_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a0, "rel", "prefetch");
			attr_dev(a0, "aria-label", "Previous tutorial step");
			attr_dev(a0, "class", "no-underline svelte-faku86");
			attr_dev(a0, "href", a0_href_value = "tutorial/" + (/*selected*/ ctx[2].prev || /*selected*/ ctx[2]).slug);
			toggle_class(a0, "disabled", !/*selected*/ ctx[2].prev);
			add_location(a0, file, 66, 1, 961);
			set_style(span0, "position", "relative");
			set_style(span0, "top", "-0.1em");
			set_style(span0, "margin", "0 0.5em 0 0");
			attr_dev(span0, "class", "svelte-faku86");
			add_location(span0, file, 73, 4, 1188);
			attr_dev(strong, "class", "svelte-faku86");
			add_location(strong, file, 72, 3, 1175);
			attr_dev(span1, "class", "svelte-faku86");
			add_location(span1, file, 71, 2, 1165);
			attr_dev(select, "class", "svelte-faku86");
			add_location(select, file, 79, 2, 1367);
			attr_dev(div, "class", "svelte-faku86");
			add_location(div, file, 70, 1, 1157);
			attr_dev(a1, "rel", "prefetch");
			attr_dev(a1, "aria-label", "Next tutorial step");
			attr_dev(a1, "class", "no-underline svelte-faku86");
			attr_dev(a1, "href", a1_href_value = "tutorial/" + (/*selected*/ ctx[2].next || /*selected*/ ctx[2]).slug);
			toggle_class(a1, "disabled", !/*selected*/ ctx[2].next);
			add_location(a1, file, 90, 1, 1689);
			attr_dev(nav, "class", "svelte-faku86");
			add_location(nav, file, 65, 0, 954);
		},
		m: function mount(target, anchor) {
			insert_dev(target, nav, anchor);
			append_dev(nav, a0);
			mount_component(icon0, a0, null);
			append_dev(nav, t0);
			append_dev(nav, div);
			append_dev(div, span1);
			append_dev(span1, strong);
			append_dev(strong, span0);
			mount_component(icon1, span0, null);
			append_dev(strong, t1);
			append_dev(strong, t2);
			append_dev(strong, t3);
			append_dev(span1, t4);
			append_dev(span1, t5);
			append_dev(div, t6);
			append_dev(div, select);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			select_option(select, /*slug*/ ctx[1]);
			append_dev(nav, t7);
			append_dev(nav, a1);
			mount_component(icon2, a1, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(select, "change", /*navigate*/ ctx[3], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*selected*/ 4 && a0_href_value !== (a0_href_value = "tutorial/" + (/*selected*/ ctx[2].prev || /*selected*/ ctx[2]).slug)) {
				attr_dev(a0, "href", a0_href_value);
			}

			if (dirty & /*selected*/ 4) {
				toggle_class(a0, "disabled", !/*selected*/ ctx[2].prev);
			}

			if ((!current || dirty & /*selected*/ 4) && t2_value !== (t2_value = /*selected*/ ctx[2].section.title + "")) set_data_dev(t2, t2_value);
			if ((!current || dirty & /*selected*/ 4) && t5_value !== (t5_value = /*selected*/ ctx[2].chapter.title + "")) set_data_dev(t5, t5_value);

			if (dirty & /*sections, String*/ 1) {
				each_value = /*sections*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (!current || dirty & /*slug, sections*/ 3) {
				select_option(select, /*slug*/ ctx[1]);
			}

			if (!current || dirty & /*selected*/ 4 && a1_href_value !== (a1_href_value = "tutorial/" + (/*selected*/ ctx[2].next || /*selected*/ ctx[2]).slug)) {
				attr_dev(a1, "href", a1_href_value);
			}

			if (dirty & /*selected*/ 4) {
				toggle_class(a1, "disabled", !/*selected*/ ctx[2].next);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon0.$$.fragment, local);
			transition_in(icon1.$$.fragment, local);
			transition_in(icon2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon0.$$.fragment, local);
			transition_out(icon1.$$.fragment, local);
			transition_out(icon2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(nav);
			destroy_component(icon0);
			destroy_component(icon1);
			destroy_each(each_blocks, detaching);
			destroy_component(icon2);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("TableOfContents", slots, []);
	let { sections } = $$props;
	let { slug } = $$props;
	let { selected } = $$props;

	function navigate(e) {
		goto(`tutorial/${e.target.value}`);
	}

	const writable_props = ["sections", "slug", "selected"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<TableOfContents> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("sections" in $$props) $$invalidate(0, sections = $$props.sections);
		if ("slug" in $$props) $$invalidate(1, slug = $$props.slug);
		if ("selected" in $$props) $$invalidate(2, selected = $$props.selected);
	};

	$$self.$capture_state = () => ({
		goto,
		Icon,
		sections,
		slug,
		selected,
		navigate
	});

	$$self.$inject_state = $$props => {
		if ("sections" in $$props) $$invalidate(0, sections = $$props.sections);
		if ("slug" in $$props) $$invalidate(1, slug = $$props.slug);
		if ("selected" in $$props) $$invalidate(2, selected = $$props.selected);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [sections, slug, selected, navigate];
}

class TableOfContents extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { sections: 0, slug: 1, selected: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "TableOfContents",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*sections*/ ctx[0] === undefined && !("sections" in props)) {
			console.warn("<TableOfContents> was created without expected prop 'sections'");
		}

		if (/*slug*/ ctx[1] === undefined && !("slug" in props)) {
			console.warn("<TableOfContents> was created without expected prop 'slug'");
		}

		if (/*selected*/ ctx[2] === undefined && !("selected" in props)) {
			console.warn("<TableOfContents> was created without expected prop 'selected'");
		}
	}

	get sections() {
		throw new Error("<TableOfContents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set sections(value) {
		throw new Error("<TableOfContents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get slug() {
		throw new Error("<TableOfContents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set slug(value) {
		throw new Error("<TableOfContents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get selected() {
		throw new Error("<TableOfContents>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selected(value) {
		throw new Error("<TableOfContents>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/tutorial/[slug]/index.svelte generated by Svelte v3.31.0 */

const { window: window_1 } = globals;
// needed for context API tutorial

const file$1 = "src/routes/tutorial/[slug]/index.svelte";

// (280:5) {#if chapter.app_b}
function create_if_block_2(ctx) {
	let button;
	let t_value = (/*completed*/ ctx[7] ? "Reset" : "Show me") + "";
	let t;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t = claim_text(button_nodes, t_value);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "class", "show svelte-83py63");
			add_location(button, file$1, 282, 6, 6009);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler*/ ctx[14], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*completed*/ 128 && t_value !== (t_value = (/*completed*/ ctx[7] ? "Reset" : "Show me") + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(280:5) {#if chapter.app_b}",
		ctx
	});

	return block;
}

// (288:5) {#if selected.next}
function create_if_block_1(ctx) {
	let a;
	let t;
	let a_href_value;

	const block = {
		c: function create() {
			a = element("a");
			t = text("Next");
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { class: true, href: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, "Next");
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "class", "next svelte-83py63");
			attr_dev(a, "href", a_href_value = "tutorial/" + /*selected*/ ctx[5].next.slug);
			add_location(a, file$1, 288, 6, 6183);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*selected*/ 32 && a_href_value !== (a_href_value = "tutorial/" + /*selected*/ ctx[5].next.slug)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(288:5) {#if selected.next}",
		ctx
	});

	return block;
}

// (310:1) {#if mobile}
function create_if_block(ctx) {
	let screentoggle;
	let updating_offset;
	let current;

	function screentoggle_offset_binding(value) {
		/*screentoggle_offset_binding*/ ctx[17].call(null, value);
	}

	let screentoggle_props = { labels: ["tutorial", "input", "output"] };

	if (/*offset*/ ctx[6] !== void 0) {
		screentoggle_props.offset = /*offset*/ ctx[6];
	}

	screentoggle = new ScreenToggle({
			props: screentoggle_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(screentoggle, "offset", screentoggle_offset_binding));

	const block = {
		c: function create() {
			create_component(screentoggle.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(screentoggle.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(screentoggle, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const screentoggle_changes = {};

			if (!updating_offset && dirty & /*offset*/ 64) {
				updating_offset = true;
				screentoggle_changes.offset = /*offset*/ ctx[6];
				add_flush_callback(() => updating_offset = false);
			}

			screentoggle.$set(screentoggle_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(screentoggle.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(screentoggle.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(screentoggle, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(310:1) {#if mobile}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let title_value;
	let meta0;
	let meta1;
	let meta1_content_value;
	let meta2;
	let meta2_content_value;
	let t0;
	let div6;
	let div5;
	let div3;
	let div0;
	let tableofcontents;
	let t1;
	let div2;
	let html_tag;
	let raw_value = /*chapter*/ ctx[1].html + "";
	let t2;
	let div1;
	let t3;
	let t4;
	let div4;
	let repl_1;
	let div5_class_value;
	let t5;
	let current;
	let mounted;
	let dispose;
	add_render_callback(/*onwindowresize*/ ctx[13]);
	document.title = title_value = "" + (/*selected*/ ctx[5].section.title + " / " + /*selected*/ ctx[5].chapter.title + " • Svelte Tutorial");

	tableofcontents = new TableOfContents({
			props: {
				sections: /*sections*/ ctx[9],
				slug: /*slug*/ ctx[0],
				selected: /*selected*/ ctx[5]
			},
			$$inline: true
		});

	let if_block0 = /*chapter*/ ctx[1].app_b && create_if_block_2(ctx);
	let if_block1 = /*selected*/ ctx[5].next && create_if_block_1(ctx);

	let repl_1_props = {
		workersUrl: "workers",
		svelteUrl,
		rollupUrl,
		orientation: /*mobile*/ ctx[8] ? "columns" : "rows",
		fixed: /*mobile*/ ctx[8],
		injectedJS: mapbox_setup,
		relaxed: true
	};

	repl_1 = new Repl({ props: repl_1_props, $$inline: true });
	/*repl_1_binding*/ ctx[16](repl_1);
	repl_1.$on("change", /*handle_change*/ ctx[12]);
	let if_block2 = /*mobile*/ ctx[8] && create_if_block(ctx);

	const block = {
		c: function create() {
			meta0 = element("meta");
			meta1 = element("meta");
			meta2 = element("meta");
			t0 = space();
			div6 = element("div");
			div5 = element("div");
			div3 = element("div");
			div0 = element("div");
			create_component(tableofcontents.$$.fragment);
			t1 = space();
			div2 = element("div");
			t2 = space();
			div1 = element("div");
			if (if_block0) if_block0.c();
			t3 = space();
			if (if_block1) if_block1.c();
			t4 = space();
			div4 = element("div");
			create_component(repl_1.$$.fragment);
			t5 = space();
			if (if_block2) if_block2.c();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1xptfdv\"]", document.head);
			meta0 = claim_element(head_nodes, "META", { name: true, content: true });
			meta1 = claim_element(head_nodes, "META", { name: true, content: true });
			meta2 = claim_element(head_nodes, "META", { name: true, content: true });
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div6 = claim_element(nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div3 = claim_element(div5_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(tableofcontents.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t1 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			t2 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if (if_block0) if_block0.l(div1_nodes);
			t3 = claim_space(div1_nodes);
			if (if_block1) if_block1.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t4 = claim_space(div5_nodes);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			claim_component(repl_1.$$.fragment, div4_nodes);
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			t5 = claim_space(div6_nodes);
			if (if_block2) if_block2.l(div6_nodes);
			div6_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta0, "name", "twitter:title");
			attr_dev(meta0, "content", "Svelte tutorial");
			add_location(meta0, file$1, 261, 1, 5266);
			attr_dev(meta1, "name", "twitter:description");
			attr_dev(meta1, "content", meta1_content_value = "" + (/*selected*/ ctx[5].section.title + " / " + /*selected*/ ctx[5].chapter.title));
			add_location(meta1, file$1, 262, 1, 5321);
			attr_dev(meta2, "name", "Description");
			attr_dev(meta2, "content", meta2_content_value = "" + (/*selected*/ ctx[5].section.title + " / " + /*selected*/ ctx[5].chapter.title));
			add_location(meta2, file$1, 263, 1, 5418);
			attr_dev(div0, "class", "table-of-contents");
			add_location(div0, file$1, 271, 3, 5666);
			html_tag = new HtmlTag(t2);
			attr_dev(div1, "class", "controls svelte-83py63");
			add_location(div1, file$1, 278, 4, 5846);
			attr_dev(div2, "class", "chapter-markup svelte-83py63");
			add_location(div2, file$1, 275, 3, 5764);
			attr_dev(div3, "class", "tutorial-text svelte-83py63");
			add_location(div3, file$1, 270, 2, 5635);
			attr_dev(div4, "class", "tutorial-repl");
			add_location(div4, file$1, 294, 2, 6289);
			attr_dev(div5, "class", div5_class_value = "viewport offset-" + /*offset*/ ctx[6] + " svelte-83py63");
			add_location(div5, file$1, 269, 1, 5594);
			attr_dev(div6, "class", "tutorial-outer svelte-83py63");
			add_location(div6, file$1, 268, 0, 5564);
		},
		m: function mount(target, anchor) {
			append_dev(document.head, meta0);
			append_dev(document.head, meta1);
			append_dev(document.head, meta2);
			insert_dev(target, t0, anchor);
			insert_dev(target, div6, anchor);
			append_dev(div6, div5);
			append_dev(div5, div3);
			append_dev(div3, div0);
			mount_component(tableofcontents, div0, null);
			append_dev(div3, t1);
			append_dev(div3, div2);
			html_tag.m(raw_value, div2);
			append_dev(div2, t2);
			append_dev(div2, div1);
			if (if_block0) if_block0.m(div1, null);
			append_dev(div1, t3);
			if (if_block1) if_block1.m(div1, null);
			/*div2_binding*/ ctx[15](div2);
			append_dev(div5, t4);
			append_dev(div5, div4);
			mount_component(repl_1, div4, null);
			append_dev(div6, t5);
			if (if_block2) if_block2.m(div6, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(window_1, "resize", /*onwindowresize*/ ctx[13]);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*selected*/ 32) && title_value !== (title_value = "" + (/*selected*/ ctx[5].section.title + " / " + /*selected*/ ctx[5].chapter.title + " • Svelte Tutorial"))) {
				document.title = title_value;
			}

			if (!current || dirty & /*selected*/ 32 && meta1_content_value !== (meta1_content_value = "" + (/*selected*/ ctx[5].section.title + " / " + /*selected*/ ctx[5].chapter.title))) {
				attr_dev(meta1, "content", meta1_content_value);
			}

			if (!current || dirty & /*selected*/ 32 && meta2_content_value !== (meta2_content_value = "" + (/*selected*/ ctx[5].section.title + " / " + /*selected*/ ctx[5].chapter.title))) {
				attr_dev(meta2, "content", meta2_content_value);
			}

			const tableofcontents_changes = {};
			if (dirty & /*slug*/ 1) tableofcontents_changes.slug = /*slug*/ ctx[0];
			if (dirty & /*selected*/ 32) tableofcontents_changes.selected = /*selected*/ ctx[5];
			tableofcontents.$set(tableofcontents_changes);
			if ((!current || dirty & /*chapter*/ 2) && raw_value !== (raw_value = /*chapter*/ ctx[1].html + "")) html_tag.p(raw_value);

			if (/*chapter*/ ctx[1].app_b) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					if_block0.m(div1, t3);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*selected*/ ctx[5].next) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					if_block1.m(div1, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			const repl_1_changes = {};
			if (dirty & /*mobile*/ 256) repl_1_changes.orientation = /*mobile*/ ctx[8] ? "columns" : "rows";
			if (dirty & /*mobile*/ 256) repl_1_changes.fixed = /*mobile*/ ctx[8];
			repl_1.$set(repl_1_changes);

			if (!current || dirty & /*offset*/ 64 && div5_class_value !== (div5_class_value = "viewport offset-" + /*offset*/ ctx[6] + " svelte-83py63")) {
				attr_dev(div5, "class", div5_class_value);
			}

			if (/*mobile*/ ctx[8]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*mobile*/ 256) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div6, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tableofcontents.$$.fragment, local);
			transition_in(repl_1.$$.fragment, local);
			transition_in(if_block2);
			current = true;
		},
		o: function outro(local) {
			transition_out(tableofcontents.$$.fragment, local);
			transition_out(repl_1.$$.fragment, local);
			transition_out(if_block2);
			current = false;
		},
		d: function destroy(detaching) {
			detach_dev(meta0);
			detach_dev(meta1);
			detach_dev(meta2);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div6);
			destroy_component(tableofcontents);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			/*div2_binding*/ ctx[15](null);
			/*repl_1_binding*/ ctx[16](null);
			destroy_component(repl_1);
			if (if_block2) if_block2.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload({ params }) {
	const res = await this.fetch(`tutorial/${params.slug}.json`);

	if (!res.ok) {
		return this.redirect(301, `tutorial/basics`);
	}

	return {
		slug: params.slug,
		chapter: await res.json()
	};
}

const tutorial_repo_link = "https://github.com/sveltejs/svelte/tree/master/site/content/tutorial";

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("U5Bslugu5D", slots, []);
	let { slug } = $$props;
	let { chapter } = $$props;
	const { sections } = getContext("tutorial");
	let repl;
	let prev;
	let scrollable;
	const lookup = new Map();
	let width =  window.innerWidth ;
	let offset = 0;

	sections.forEach(section => {
		section.chapters.forEach(chapter => {
			const obj = {
				slug: chapter.slug,
				section,
				chapter,
				prev
			};

			lookup.set(chapter.slug, obj);

			{
				// pending https://github.com/sveltejs/svelte/issues/2135
				if (prev) prev.next = obj;

				prev = obj;
			}
		});
	});

	const clone = file => ({
		name: file.name,
		type: file.type,
		source: file.source
	});

	function reset() {
		repl.update({ components: chapter.app_a.map(clone) });
	}

	function complete() {
		repl.update({ components: chapter.app_b.map(clone) });
	}

	let completed = false;

	function handle_change(event) {
		$$invalidate(7, completed = event.detail.components.every((file, i) => {
			const expected = chapter.app_b[i];
			return expected && (file.name === expected.name && file.type === expected.type && file.source.trim().replace(/\s+$/gm, "") === expected.source.trim().replace(/\s+$/gm, ""));
		}));
	}

	const writable_props = ["slug", "chapter"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<U5Bslugu5D> was created with unknown prop '${key}'`);
	});

	function onwindowresize() {
		$$invalidate(4, width = window_1.innerWidth);
	}

	const click_handler = () => completed ? reset() : complete();

	function div2_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			scrollable = $$value;
			$$invalidate(3, scrollable);
		});
	}

	function repl_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			repl = $$value;
			$$invalidate(2, repl);
		});
	}

	function screentoggle_offset_binding(value) {
		offset = value;
		$$invalidate(6, offset);
	}

	$$self.$$set = $$props => {
		if ("slug" in $$props) $$invalidate(0, slug = $$props.slug);
		if ("chapter" in $$props) $$invalidate(1, chapter = $$props.chapter);
	};

	$$self.$capture_state = () => ({
		preload,
		Repl,
		getContext,
		ScreenToggle,
		TableOfContents,
		mapbox_setup,
		rollupUrl,
		svelteUrl,
		slug,
		chapter,
		sections,
		repl,
		prev,
		scrollable,
		lookup,
		width,
		offset,
		tutorial_repo_link,
		clone,
		reset,
		complete,
		completed,
		handle_change,
		selected,
		improve_link,
		mobile
	});

	$$self.$inject_state = $$props => {
		if ("slug" in $$props) $$invalidate(0, slug = $$props.slug);
		if ("chapter" in $$props) $$invalidate(1, chapter = $$props.chapter);
		if ("repl" in $$props) $$invalidate(2, repl = $$props.repl);
		if ("prev" in $$props) prev = $$props.prev;
		if ("scrollable" in $$props) $$invalidate(3, scrollable = $$props.scrollable);
		if ("width" in $$props) $$invalidate(4, width = $$props.width);
		if ("offset" in $$props) $$invalidate(6, offset = $$props.offset);
		if ("completed" in $$props) $$invalidate(7, completed = $$props.completed);
		if ("selected" in $$props) $$invalidate(5, selected = $$props.selected);
		if ("improve_link" in $$props) improve_link = $$props.improve_link;
		if ("mobile" in $$props) $$invalidate(8, mobile = $$props.mobile);
	};

	let selected;
	let improve_link;
	let mobile;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*scrollable, chapter*/ 10) {
			// TODO is there a non-hacky way to trigger scroll when chapter changes?
			 if (scrollable) (scrollable.scrollTo(0, 0));
		}

		if ($$self.$$.dirty & /*slug*/ 1) {
			 $$invalidate(5, selected = lookup.get(slug));
		}

		if ($$self.$$.dirty & /*selected*/ 32) {
			 improve_link = `${tutorial_repo_link}/${selected.chapter.section_dir}/${selected.chapter.chapter_dir}`;
		}

		if ($$self.$$.dirty & /*repl, chapter*/ 6) {
			 if (repl) {
				$$invalidate(7, completed = false);
				repl.set({ components: chapter.app_a.map(clone) });
			}
		}

		if ($$self.$$.dirty & /*width*/ 16) {
			 $$invalidate(8, mobile = width < 768);
		}
	};

	return [
		slug,
		chapter,
		repl,
		scrollable,
		width,
		selected,
		offset,
		completed,
		mobile,
		sections,
		reset,
		complete,
		handle_change,
		onwindowresize,
		click_handler,
		div2_binding,
		repl_1_binding,
		screentoggle_offset_binding
	];
}

class U5Bslugu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { slug: 0, chapter: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bslugu5D",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*slug*/ ctx[0] === undefined && !("slug" in props)) {
			console.warn("<U5Bslugu5D> was created without expected prop 'slug'");
		}

		if (/*chapter*/ ctx[1] === undefined && !("chapter" in props)) {
			console.warn("<U5Bslugu5D> was created without expected prop 'chapter'");
		}
	}

	get slug() {
		throw new Error("<U5Bslugu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set slug(value) {
		throw new Error("<U5Bslugu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get chapter() {
		throw new Error("<U5Bslugu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set chapter(value) {
		throw new Error("<U5Bslugu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bslugu5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
